name: 'Nuget Auto Upgrader'
author: Shannon Deminick
description: 'Auto upgrade nuget packages in your projects'
inputs:
  github-token:
    description: 'A GitHub token that has access to this repository to push and create a PR. Typically just pass in secrets.GITHUB_TOKEN'
    required: true
  project-file:
    description: 'The relative path of your project file to upgrade (i.e. src/Shazwazza.Web/Shazwazza.Web.csproj)'
    required: true
  package-file:
    description: 'The relative path of your packages.config file for your project (i.e. src/Shazwazza.Web/packages.config)'
    required: true
  package-name:
    description: 'The Nuget package name you want upgraded'
    required: true
  git-bot-user:
    description: 'The bot user name who will author the commit and PR (i.e. Friendly Upgrade Bot)'
    required: true
  git-bot-email:
    description: 'The bot email will author the commit and PR (i.e. upgrader@example.com)'
    required: true
  disable-upgrade-step:
    description: 'Can be used for testing to do a dry run and will not actually perform the upgrade. Set to "true" or "false".'
    required: false
    default: "false"
  disable-commit:
    description: 'Can be used for testing. If "true" will run the upgrade but not commit or continue further. Set to "true" or "false".'
    required: false
    default: "false"
  disable-push:
    description: 'Can be used for testing. If "true" will run the upgrade and commit but not push changes or continue further. Set to "true" or "false".'
    required: false
    default: "false"
  disable-pull-request:
    description: 'Can be used for testing. If "true" will run the upgrade, commit and push but will not create the PR. Set to "true" or "false".'
    required: false
    default: "false"
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-id }}
runs:
  using: "composite"
  steps:
    - name: Installing modules and initializing
      run: |
        # $VerbosePreference = "continue"

        # Create temp folder
        $tempFolder = "$Env:GITHUB_WORKSPACE\build\_temp"
        New-Item -ItemType Directory -Force -Path $tempFolder

        # Set the module folder env variable so that our custom functions are auto-loaded
        $Env:PSModulePath = $Env:PSModulePath + "$([System.IO.Path]::PathSeparator)${{ github.action_path }}\Examples\NET_Framework\WebApplication\build\PowershellModules\"
        # Ensure the env variable value flows through to the next tasks
        echo ("PSModulePath=" + $Env:PSModulePath) >> $Env:GITHUB_ENV
        
        Install-Module -Name PowerShellForGitHub -Force
        # Enable logging to a relative file
        $logPath = "$tempFolder\PSForGHLog.txt"
        Write-Verbose "Logging to: $logPath"
        Set-GitHubConfiguration -LogPath $logPath -DisableLogging:$false
      shell: pwsh
      
    - name: "Get latest version of ${{ inputs.package-name }} from GitHub"
      run: |
        $VerbosePreference = "continue"

        $ghRepoParts = "${{ github.repository }}".Split("/")
        $currentVersion = Get-CurrentPackageVersion -OwnerName $ghRepoParts[0] -RepositoryName $ghRepoParts[1] -AccessToken ${{ inputs.github-token }} -PackageFile ${{ inputs.package-file }} -PackageName ${{ inputs.package-name }}
        if (!$currentVersion){
            Throw "Could not determine package version, cannot continue"
        }
        Write-Verbose "Latest local version of ${{ inputs.package-name }} is $currentVersion"
        # set the variables
        echo ("CurrentVersion=" + $currentVersion) >> $Env:GITHUB_ENV
      shell: pwsh
    
    - name: Get latest version of ${{ inputs.package-name }} from Nuget
      run: |
        $VerbosePreference = "continue"

        #$nuget = Get-NugetExe -DestinationFolder $Env:AGENT_TEMPDIRECTORY
        #$latest = Get-LatestPackageVersion -PackageName ${{ inputs.package-name }} -NugetExe $nuget
        # TRY JUST PASSING IN THE DEFAULT nuget
        $latest = Get-LatestPackageVersion -PackageName ${{ inputs.package-name }} -NugetExe (Get-Command nuget).Source
        
        if (!$latest){
            Throw "Could not determine package version, cannot continue"
        }
        Write-Verbose "Latest nuget version of ${{ inputs.package-name }} is $latest"

        # Compare versions
        $hasUpgrade = Get-UpgradeAvailable -SourceVersion ${{ env.CurrentVersion }} -DestVersion $latest
        if ($hasUpgrade) {
            Write-Verbose "An upgrade is available!"
        }
        # set the variables
        echo ("LatestVersion=" + $latest) >> $Env:GITHUB_ENV
        echo ("HasUpgrade=" + $hasUpgrade) >> $Env:GITHUB_ENV
        echo ("NugetExe=" + $nuget) >> $Env:GITHUB_ENV
      shell: pwsh    
    
    - name: Creating branch
      run: |
        $VerbosePreference = "continue"
        
        if ($Env:HasUpgrade -ne "True") {
          Throw "No upgrade detected"
        }

        if ($Env:INPUT_DISABLE_UPGRADE_STEP -eq "true") {
          Throw "Upgrade step is disabled. Quitting."
        }

        $branchName = "${{ inputs.package-name }}-upgrade-${{ env.CurrentVersion }}-to-${{ env.LatestVersion }}"        

        git show-ref --verify --quiet `"refs/heads/$branchName`"
        if ($?){
            Write-Verbose "Branch $branchName already exists, updating to branch"
            git checkout "$branchName"
        }
        else {
            git branch "$branchName"
            git checkout "$branchName"
        }

        # set the variables
        echo ("BranchName=" + $branchName) >> $Env:GITHUB_ENV
      shell: pwsh
      
    - name: Upgrading project
      run: |
        $repoRoot = Get-Item "${{ github.workspace }}"
        # don't specify explicit version, have nuget just update to the latest compatible
        Update-NugetPackage -PackageName ${{ inputs.package-name }} -ProjectFile ${{ inputs.project-file}} -RootGitDirectory $($repoRoot.FullName) -NugetExe (Get-Command nuget).Source
      shell: pwsh

    - name: Building project
      working-directory: ${{ github.workspace }}
      run: |
        & msbuild ${{ inputs.project-file}}
      shell: pwsh

    - name: Renaming Branch
      run: |
        $actualVersion = Get-ConfigPackageVersion -PackageFile ${{ inputs.package-file }} -PackageName ${{ inputs.package-name }}
        $branchName = "${{ inputs.package-name }}-upgrade-${{ env.CurrentVersion }}-to-$actualVersion"
        # rename the branch to the actual version
        git branch -m $branchName
        
        # set the variables
        echo ("ActualVersion=" + $actualVersion) >> $Env:GITHUB_ENV
        echo ("BranchName=" + $branchName) >> $Env:GITHUB_ENV
      shell: pwsh
    
    - name: Committing changes
      run: |
        if ($Env:INPUT_DISABLE_COMMIT -eq "true") {
          Throw "Commit step is disabled. Quitting."
        }

        $message = "Updated files for the ${{ inputs.package-name }} from ${{ env.CurrentVersion }} to ${{ env.ActualVersion }} (Attempted ${{ env.LatestVersion }} )"
        git add -A
        git -c "user.name=${{ inputs.git-bot-user }}" -c "user.email=${{ inputs.git-bot-email }}" commit -am "$message" --author "${{ inputs.git-bot-user }} <${{ env.GitBotEmail }}>"
      shell: pwsh

    - name: Check for existing PR
      run: |
        $VerbosePreference = "continue"
        $ghRepoParts = "${{ github.repository }}".Split("/")
        $pr = Get-PullRequest -OwnerName $ghRepoParts[0] -RepositoryName $ghRepoParts[1] -AccessToken ${{ inputs.github-token }} -BranchName ${{ env.BranchName }}
        if ($pr) {
            throw "A Pull Request already exists for this upgrade"
        }
        else {
            Write-Verbose "An existing PR for this upgrade does not exist"            
        }
      shell: pwsh

    - name: Push Changes
      run : |
        if ($Env:INPUT_DISABLE_PUSH -eq "true") {
          Throw "Commit step is disabled. Quitting."
        }

        git -c "user.name=${{ inputs.git-bot-user }}" -c "user.email=${{ inputs.git-bot-email }}" push -u origin "${{ env.BranchName }}"
      shell: pwsh
      
    - name: Creating pull request
      run : |
        if ($Env:INPUT_DISABLE_PULL_REQUEST -eq "true") {
          Throw "Commit step is disabled. Quitting."
        }

        $ghRepoParts = "${{ github.repository }}".Split("/")
        $pr = New-PullRequest -OwnerName $ghRepoParts[0] -RepositoryName $ghRepoParts[1] -AccessToken ${{ inputs.github-token }} -SourceVersion ${{ env.CurrentVersion }} -PackageVersion ${{ env.ActualVersion }} -PackageName ${{ inputs.package-name }} -BranchName ${{ env.BranchName }}
      shell: pwsh