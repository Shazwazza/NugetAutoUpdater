name: 'Nuget Auto Upgrader'
author: Shannon Deminick
branding:
  icon: 'sunrise'
  color: 'blue'
description: 'Auto upgrade nuget packages in your projects'
inputs:
  github-token:
    description: 'A GitHub token that has access to this repository to push and create a PR. Typically just pass in secrets.GITHUB_TOKEN'
    required: true
  project-file:
    description: 'The relative path of your project file to upgrade (i.e. src/Shazwazza.Web/Shazwazza.Web.csproj)'
    required: true
  package-file:
    description: 'The relative path of your packages.config file for your project (i.e. src/Shazwazza.Web/packages.config)'
    required: true
  package-name:
    description: 'The Nuget package name you want upgraded'
    required: true
  git-bot-user:
    description: 'The bot user name who will author the commit and PR (i.e. Friendly Upgrade Bot)'
    required: true
  git-bot-email:
    description: 'The bot email will author the commit and PR (i.e. upgrader@example.com)'
    required: true
  disable-upgrade-step:
    description: 'Can be used for testing to do a dry run and will not actually perform the upgrade. Set to "true" or "false".'
    required: false
    default: "false"
  disable-commit:
    description: 'Can be used for testing. If "true" will run the upgrade but not commit or continue further. Set to "true" or "false".'
    required: false
    default: "false"
  disable-push:
    description: 'Can be used for testing. If "true" will run the upgrade and commit but not push changes or continue further. Set to "true" or "false".'
    required: false
    default: "false"
  disable-pull-request:
    description: 'Can be used for testing. If "true" will run the upgrade, commit and push but will not create the PR. Set to "true" or "false".'
    required: false
    default: "false"
  verbose:
    description: 'Set to "true" to output verbose logging'
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - name: Installing modules and initializing
      run: |
        $VerbosePreference = ($Env:INPUT_VERBOSE -eq "true") ? "Continue" : "SilentlyContinue"

        echo "Configuring local PowerShell modules"

        # Create temp folder
        $tempFolder = "$Env:GITHUB_WORKSPACE\build\_temp"
        New-Item -ItemType Directory -Force -Path $tempFolder

        # Set the module folder env variable so that our custom functions are auto-loaded
        $Env:PSModulePath = $Env:PSModulePath + "$([System.IO.Path]::PathSeparator)${{ github.action_path }}\Examples\NET_Framework\WebApplication\build\PowershellModules\"
        # Ensure the env variable value flows through to the next tasks
        echo ("PSModulePath=" + $Env:PSModulePath) >> $Env:GITHUB_ENV
        
        echo "Installing PowerShellForGitHub module"

        Install-Module -Name PowerShellForGitHub -Force
        # Enable logging to a relative file
        $logPath = "$tempFolder\PSForGHLog.txt"
        Set-GitHubConfiguration -LogPath $logPath -DisableLogging:$false
        Set-GitHubConfiguration -SuppressTelemetryReminder
      shell: pwsh
      
    - name: "Get latest version of ${{ inputs.package-name }} from GitHub"
      run: |
        $VerbosePreference = ($Env:INPUT_VERBOSE -eq "true") ? "Continue" : "SilentlyContinue"

        $ghRepoParts = "${{ github.repository }}".Split("/")
        $currentVersion = Get-CurrentPackageVersion -OwnerName $ghRepoParts[0] -RepositoryName $ghRepoParts[1] -AccessToken ${{ inputs.github-token }} -PackageFile ${{ inputs.package-file }} -PackageName ${{ inputs.package-name }}
        if (!$currentVersion){
          echo "::error::Could not determine package version, cannot continue"
          exit 1
        }

        echo "Latest local version of ${{ inputs.package-name }} is $currentVersion"

        # set the variables
        echo ("CurrentVersion=" + $currentVersion) >> $Env:GITHUB_ENV
      shell: pwsh
    
    - name: Get latest version of ${{ inputs.package-name }} from Nuget
      run: |
        $VerbosePreference = ($Env:INPUT_VERBOSE -eq "true") ? "Continue" : "SilentlyContinue"

        #$nuget = Get-NugetExe -DestinationFolder $Env:AGENT_TEMPDIRECTORY
        #$latest = Get-LatestPackageVersion -PackageName ${{ inputs.package-name }} -NugetExe $nuget
        # TRY JUST PASSING IN THE DEFAULT nuget
        $latest = Get-LatestPackageVersion -PackageName ${{ inputs.package-name }} -NugetExe (Get-Command nuget).Source
        
        if (!$latest){
          echo "::error::Could not determine package version, cannot continue"
          exit 1
        }

        echo "Latest nuget version of ${{ inputs.package-name }} is $latest"

        # Compare versions
        $hasUpgrade = Get-UpgradeAvailable -SourceVersion ${{ env.CurrentVersion }} -DestVersion $latest
        if ($hasUpgrade) {
          echo "An upgrade is available!"
        }

        # set the variables
        echo ("LatestVersion=" + $latest) >> $Env:GITHUB_ENV
        echo ("HasUpgrade=" + $hasUpgrade) >> $Env:GITHUB_ENV
        echo ("NugetExe=" + $nuget) >> $Env:GITHUB_ENV
      shell: pwsh    
    
    - name: Creating branch
      run: |
        if ($Env:HasUpgrade -ne "True") {
          echo "::warning::No upgrade detected"
          echo ("ActionContinue='false') >> $Env:GITHUB_ENV
        }
        elseif ($Env:INPUT_DISABLE_UPGRADE_STEP -eq "true") {
          echo "::warning::Upgrade step is disabled. Quitting."
          echo ("ActionContinue='false') >> $Env:GITHUB_ENV
        }
        else {
          $branchName = "${{ inputs.package-name }}-upgrade-${{ env.CurrentVersion }}-to-${{ env.LatestVersion }}"        

          git show-ref --verify --quiet `"refs/heads/$branchName`"
          if ($?){
            echo "Branch $branchName already exists, updating to branch"
            git checkout "$branchName"
          }
          else {
            git branch "$branchName"
            git checkout "$branchName"
          }

          # set the variables
          echo ("BranchName=" + $branchName) >> $Env:GITHUB_ENV
          echo ("ActionContinue='true') >> $Env:GITHUB_ENV
        }
      shell: pwsh
      
    - name: Upgrading project
      run: |
        $actionContinue = "${{ env.BranchName }}"
        if ($actionContinue -eq 'true') {
          $VerbosePreference = ($Env:INPUT_VERBOSE -eq "true") ? "Continue" : "SilentlyContinue"
          
          echo "::group::Running Nuget update for package ${{ inputs.package-name }}"
          
          $repoRoot = Get-Item "${{ github.workspace }}"
          # don't specify explicit version, have nuget just update to the latest compatible
          Update-NugetPackage -PackageName ${{ inputs.package-name }} -ProjectFile ${{ inputs.project-file}} -RootGitDirectory $($repoRoot.FullName) -NugetExe (Get-Command nuget).Source

          echo "::endgroup::"
        }
      shell: pwsh

    - name: Building project
      working-directory: ${{ github.workspace }}
      run: |
        $actionContinue = "${{ env.BranchName }}"
        if ($actionContinue -eq 'true') {
          echo "::group::Building the project ${{ inputs.project-file}}"
          & msbuild ${{ inputs.project-file}}
          echo "::endgroup::"
        }        
      shell: pwsh

    - name: Renaming Branch
      run: |
        $actionContinue = "${{ env.BranchName }}"
        if ($actionContinue -eq 'true') {
          $actualVersion = Get-ConfigPackageVersion -PackageFile ${{ inputs.package-file }} -PackageName ${{ inputs.package-name }}
          $branchName = "${{ inputs.package-name }}-upgrade-${{ env.CurrentVersion }}-to-$actualVersion"
          
          if ($actualVersion -ne $Env:LatestVersion) {
            echo "Upgrade successful but could not auto upgrade to the latest $Env:LatestVersion version, Nuget could only resolve dependencies for version $actualVersion"
          }

          # rename the branch to the actual version
          git branch -m $branchName
          
          # set the variables
          echo ("ActualVersion=" + $actualVersion) >> $Env:GITHUB_ENV
          echo ("BranchName=" + $branchName) >> $Env:GITHUB_ENV
        }        
      shell: pwsh
    
    - name: Committing changes
      run: |
        if ($Env:INPUT_DISABLE_COMMIT -eq "true") {
          echo "::warning::Commit step is disabled. Quitting."
          echo ("ActionContinue='false') >> $Env:GITHUB_ENV
        }
        else {
          echo "::group::Committing changes"
          $message = "Updated files for the ${{ inputs.package-name }} from ${{ env.CurrentVersion }} to ${{ env.ActualVersion }} (Attempted ${{ env.LatestVersion }} )"
          git add -A
          git -c "user.name=${{ inputs.git-bot-user }}" -c "user.email=${{ inputs.git-bot-email }}" commit -am "$message" --author "${{ inputs.git-bot-user }} <${{ env.GitBotEmail }}>"
          echo "::endgroup::"
        }        
      shell: pwsh

    - name: Check for existing PR
      run: |
        $actionContinue = "${{ env.BranchName }}"
        if ($actionContinue -eq 'true') {
          $VerbosePreference = ($Env:INPUT_VERBOSE -eq "true") ? "Continue" : "SilentlyContinue"
          
          echo "::group::Checking for existing Pull Request"
          
          $ghRepoParts = "${{ github.repository }}".Split("/")
          $pr = Get-PullRequest -OwnerName $ghRepoParts[0] -RepositoryName $ghRepoParts[1] -AccessToken ${{ inputs.github-token }} -BranchName ${{ env.BranchName }}
          
          if ($pr) {
            echo "::error::A Pull Request already exists for this upgrade"
            echo ("ActionContinue='false') >> $Env:GITHUB_ENV
          }
          else {
            echo "An existing PR for this upgrade does not exist"
          }

          echo "::endgroup::"
        }        
      shell: pwsh

    - name: Push Changes
      run : |
        $actionContinue = "${{ env.BranchName }}"
        if ($actionContinue -eq 'true') {
          if ($Env:INPUT_DISABLE_PUSH -eq "true") {
            echo "::warning::Commit step is disabled. Quitting."
            echo ("ActionContinue='false') >> $Env:GITHUB_ENV
          }
          else {
            echo "::group::Pushing changes"
            git -c "user.name=${{ inputs.git-bot-user }}" -c "user.email=${{ inputs.git-bot-email }}" push -u origin "${{ env.BranchName }}"
            echo "::endgroup::"
          }                
        }        
      shell: pwsh
      
    - name: Creating pull request
      run : |
        $actionContinue = "${{ env.BranchName }}"
        if ($actionContinue -eq 'true') {
          $VerbosePreference = ($Env:INPUT_VERBOSE -eq "true") ? "Continue" : "SilentlyContinue"

          if ($Env:INPUT_DISABLE_PULL_REQUEST -eq "true") {
            echo "::warning::Pull request step is disabled. Quitting."
            echo ("ActionContinue='false') >> $Env:GITHUB_ENV
          }
          else {
            echo "::group::Creating Pull Request"
            $ghRepoParts = "${{ github.repository }}".Split("/")
            $pr = New-PullRequest -OwnerName $ghRepoParts[0] -RepositoryName $ghRepoParts[1] -AccessToken ${{ inputs.github-token }} -SourceVersion ${{ env.CurrentVersion }} -PackageVersion ${{ env.ActualVersion }} -PackageName ${{ inputs.package-name }} -BranchName ${{ env.BranchName }}
            echo "::endgroup::"
          }          
        }        
      shell: pwsh